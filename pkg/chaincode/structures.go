package chaincode

// Metadata is the structure to deserialize the metadata information
type Metadata struct {
	// Mandatory parameters that the `peer chaincode package` would also
	// generate
	// Path of the chaincode main function
	Path string `json:"path,omitempty"`
	// Type of the chaincode (language)
	Type string `json:"type,omitempty"`
	// Label set for the chaincode during installation
	Label string `json:"label,omitempty"`
	// Extra parameters passed in the json. Helpful to extend the builder.
	Extra map[string]interface{} `json:"extra,omitempty"`
}

// Connection represents a connection profile file generated by the peer node
type Connection struct {
	// Address where chaincode is running as a server
	Address string `json:"address,omitempty"`
	// DialTimeout time for reaching out to the server
	DialTimeout string `json:"dial_timeout,omitempty"`
	// TlsRequired to indicate if chaincode requires TLS connection
	TlsRequired bool `json:"tls_required,omitempty"`
	// ClientAuthRequired will determine if client has to authenticate
	ClientAuthRequired bool `json:"client_auth_required,omitempty"`
	// RootCert is used to verify the remote server's authentication
	RootCert string `json:"root_cert,omitempty"`
	// ClientKey is the key used by the peer node for chaincode
	ClientKey string `json:"client_key,omitempty"`
	// ClientCert is the certificate that the peer can use to authenticate
	// with the chaincode server
	ClientCert string `json:"client_cert,omitempty"`
}

// BuildStep represents detect, build, release and run
type BuildStep int

const (
	Detect BuildStep = iota
	Build
	Release
	Run
)

// Server is for chaincode as a server
type Server struct {
	Step                 BuildStep
	ChaincodeSourceDir   string
	ChaincodeMetadataDir string
	BuildOutputDir       string
}

func GetServer(step BuildStep, chaincodeSourceDir, chaincodeMetadataDir, buildOutputDir string) BuilderI {
	return Server{
		Step:                 step,
		ChaincodeSourceDir:   chaincodeSourceDir,
		ChaincodeMetadataDir: chaincodeMetadataDir,
		BuildOutputDir:       buildOutputDir,
	}
}
